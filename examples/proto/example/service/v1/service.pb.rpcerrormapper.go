// Code generated by protoc-gen-rpc-errormapper-go. DO NOT EDIT.
// source: example/service/v1/service.proto

package exampleservicev1

import (
	"fmt"
	"google.golang.org/genproto/googleapis/rpc/code"
)

type ServiceErrorUnspecified struct {
	code     code.Code
	reason   string
	domain   string
	metadata map[string]string
}

func (e ServiceErrorUnspecified) Error() string {
	return fmt.Sprintf("%s: %s", e.code, e.reason)
}

func (e ServiceErrorUnspecified) Code() code.Code {
	return e.code
}

func (e ServiceErrorUnspecified) Reason() string {
	return e.reason
}

func (e ServiceErrorUnspecified) Domain() string {
	return e.domain
}

func (e ServiceErrorUnspecified) Metadata() map[string]string {
	return e.metadata
}

func NewServiceErrorUnspecified(code code.Code, reason string, domain string, metadata map[string]string) ServiceErrorUnspecified {
	return ServiceErrorUnspecified{
		code:     code,
		reason:   reason,
		domain:   domain,
		metadata: metadata,
	}
}

type ServiceErrorEntityNotFound struct {
	code     code.Code
	reason   string
	domain   string
	metadata map[string]string
}

func (e ServiceErrorEntityNotFound) Error() string {
	return fmt.Sprintf("%s: %s", e.code, e.reason)
}

func (e ServiceErrorEntityNotFound) Code() code.Code {
	return e.code
}

func (e ServiceErrorEntityNotFound) Reason() string {
	return e.reason
}

func (e ServiceErrorEntityNotFound) Domain() string {
	return e.domain
}

func (e ServiceErrorEntityNotFound) Metadata() map[string]string {
	return e.metadata
}

func NewServiceErrorEntityNotFound(code code.Code, reason string, domain string, metadata map[string]string) ServiceErrorEntityNotFound {
	return ServiceErrorEntityNotFound{
		code:     code,
		reason:   reason,
		domain:   domain,
		metadata: metadata,
	}
}

type ServiceErrorUserNotEligibleForAction struct {
	code     code.Code
	reason   string
	domain   string
	metadata map[string]string
}

func (e ServiceErrorUserNotEligibleForAction) Error() string {
	return fmt.Sprintf("%s: %s", e.code, e.reason)
}

func (e ServiceErrorUserNotEligibleForAction) Code() code.Code {
	return e.code
}

func (e ServiceErrorUserNotEligibleForAction) Reason() string {
	return e.reason
}

func (e ServiceErrorUserNotEligibleForAction) Domain() string {
	return e.domain
}

func (e ServiceErrorUserNotEligibleForAction) Metadata() map[string]string {
	return e.metadata
}

func NewServiceErrorUserNotEligibleForAction(code code.Code, reason string, domain string, metadata map[string]string) ServiceErrorUserNotEligibleForAction {
	return ServiceErrorUserNotEligibleForAction{
		code:     code,
		reason:   reason,
		domain:   domain,
		metadata: metadata,
	}
}

const (
	ServiceErrorUnspecifiedCode                = 2
	ServiceErrorUnspecifiedDomain              = "service.entity"
	ServiceErrorUnspecifiedReason              = "SERVICE_ERROR_UNSPECIFIED"
	ServiceErrorEntityNotFoundCode             = 5
	ServiceErrorEntityNotFoundDomain           = "service.entity"
	ServiceErrorEntityNotFoundReason           = "SERVICE_ERROR_ENTITY_NOT_FOUND"
	ServiceErrorUserNotEligibleForActionCode   = 7
	ServiceErrorUserNotEligibleForActionDomain = "service.entity"
	ServiceErrorUserNotEligibleForActionReason = "SERVICE_ERROR_USER_NOT_ELIGIBLE_FOR_ACTION"
)

func ServiceErrorDecoderMapper(code code.Code, reason, domain string, metadata map[string]string) error {
	switch reason {
	case ServiceErrorUnspecifiedReason:
		return NewServiceErrorUnspecified(code, reason, domain, metadata)
	case ServiceErrorEntityNotFoundReason:
		return NewServiceErrorEntityNotFound(code, reason, domain, metadata)
	case ServiceErrorUserNotEligibleForActionReason:
		return NewServiceErrorUserNotEligibleForAction(code, reason, domain, metadata)
	default:
		return fmt.Errorf("unknown reason: %s", reason)
	}
}

func ServiceErrorUnspecifiedEncoder(metadata map[string]string) (code.Code, string, string, map[string]string) {
	return ServiceErrorUnspecifiedCode, ServiceErrorUnspecifiedReason, ServiceErrorUnspecifiedDomain, metadata
}
func ServiceErrorEntityNotFoundEncoder(metadata map[string]string) (code.Code, string, string, map[string]string) {
	return ServiceErrorEntityNotFoundCode, ServiceErrorEntityNotFoundReason, ServiceErrorEntityNotFoundDomain, metadata
}
func ServiceErrorUserNotEligibleForActionEncoder(metadata map[string]string) (code.Code, string, string, map[string]string) {
	return ServiceErrorUserNotEligibleForActionCode, ServiceErrorUserNotEligibleForActionReason, ServiceErrorUserNotEligibleForActionDomain, metadata
}
